// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cache/cache.go

// Package cache is a generated GoMock package.
package cache

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICache is a mock of ICache interface.
type MockICache struct {
	ctrl     *gomock.Controller
	recorder *MockICacheMockRecorder
}

// MockICacheMockRecorder is the mock recorder for MockICache.
type MockICacheMockRecorder struct {
	mock *MockICache
}

// NewMockICache creates a new mock instance.
func NewMockICache(ctrl *gomock.Controller) *MockICache {
	mock := &MockICache{ctrl: ctrl}
	mock.recorder = &MockICacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICache) EXPECT() *MockICacheMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockICache) Exists(key string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockICacheMockRecorder) Exists(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockICache)(nil).Exists), key)
}

// IsCacheDisabled mocks base method.
func (m *MockICache) IsCacheDisabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCacheDisabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCacheDisabled indicates an expected call of IsCacheDisabled.
func (mr *MockICacheMockRecorder) IsCacheDisabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCacheDisabled", reflect.TypeOf((*MockICache)(nil).IsCacheDisabled))
}

// Load mocks base method.
func (m *MockICache) Load(key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockICacheMockRecorder) Load(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockICache)(nil).Load), key)
}

// Store mocks base method.
func (m *MockICache) Store(key, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", key, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockICacheMockRecorder) Store(key, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockICache)(nil).Store), key, data)
}
