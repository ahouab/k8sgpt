// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/ai/iai.go

// Package ai is a generated GoMock package.
package ai

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cache "github.com/k8sgpt-ai/k8sgpt/pkg/cache"
)

// MockIAI is a mock of IAI interface.
type MockIAI struct {
	ctrl     *gomock.Controller
	recorder *MockIAIMockRecorder
}

// MockIAIMockRecorder is the mock recorder for MockIAI.
type MockIAIMockRecorder struct {
	mock *MockIAI
}

// NewMockIAI creates a new mock instance.
func NewMockIAI(ctrl *gomock.Controller) *MockIAI {
	mock := &MockIAI{ctrl: ctrl}
	mock.recorder = &MockIAIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAI) EXPECT() *MockIAIMockRecorder {
	return m.recorder
}

// Configure mocks base method.
func (m *MockIAI) Configure(config IAIConfig, language string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Configure", config, language)
	ret0, _ := ret[0].(error)
	return ret0
}

// Configure indicates an expected call of Configure.
func (mr *MockIAIMockRecorder) Configure(config, language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockIAI)(nil).Configure), config, language)
}

// GetCompletion mocks base method.
func (m *MockIAI) GetCompletion(ctx context.Context, prompt string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCompletion", ctx, prompt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCompletion indicates an expected call of GetCompletion.
func (mr *MockIAIMockRecorder) GetCompletion(ctx, prompt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCompletion", reflect.TypeOf((*MockIAI)(nil).GetCompletion), ctx, prompt)
}

// GetName mocks base method.
func (m *MockIAI) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockIAIMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockIAI)(nil).GetName))
}

// Parse mocks base method.
func (m *MockIAI) Parse(ctx context.Context, prompt []string, cache cache.ICache) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", ctx, prompt, cache)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockIAIMockRecorder) Parse(ctx, prompt, cache interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockIAI)(nil).Parse), ctx, prompt, cache)
}

// MockIAIConfig is a mock of IAIConfig interface.
type MockIAIConfig struct {
	ctrl     *gomock.Controller
	recorder *MockIAIConfigMockRecorder
}

// MockIAIConfigMockRecorder is the mock recorder for MockIAIConfig.
type MockIAIConfigMockRecorder struct {
	mock *MockIAIConfig
}

// NewMockIAIConfig creates a new mock instance.
func NewMockIAIConfig(ctrl *gomock.Controller) *MockIAIConfig {
	mock := &MockIAIConfig{ctrl: ctrl}
	mock.recorder = &MockIAIConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAIConfig) EXPECT() *MockIAIConfigMockRecorder {
	return m.recorder
}

// GetBaseURL mocks base method.
func (m *MockIAIConfig) GetBaseURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBaseURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBaseURL indicates an expected call of GetBaseURL.
func (mr *MockIAIConfigMockRecorder) GetBaseURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBaseURL", reflect.TypeOf((*MockIAIConfig)(nil).GetBaseURL))
}

// GetEngine mocks base method.
func (m *MockIAIConfig) GetEngine() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEngine")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEngine indicates an expected call of GetEngine.
func (mr *MockIAIConfigMockRecorder) GetEngine() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEngine", reflect.TypeOf((*MockIAIConfig)(nil).GetEngine))
}

// GetModel mocks base method.
func (m *MockIAIConfig) GetModel() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModel")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetModel indicates an expected call of GetModel.
func (mr *MockIAIConfigMockRecorder) GetModel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModel", reflect.TypeOf((*MockIAIConfig)(nil).GetModel))
}

// GetPassword mocks base method.
func (m *MockIAIConfig) GetPassword() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPassword indicates an expected call of GetPassword.
func (mr *MockIAIConfigMockRecorder) GetPassword() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockIAIConfig)(nil).GetPassword))
}
